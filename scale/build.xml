<?xml version="1.0"?>
<project name="scale" default="ci" basedir=".">
    <!-- NOTE: The following items must be set in local_settings.py          -->
    <!-- GEOS_LIBRARY_PATH - Full path to the libgeos_c.so file              -->
    <property environment="env" />
    <tstamp />
    
    <!-- hosts to deploy/start -->
    <condition property="deploy.hosts" value="${env.DEPLOY_HOSTS}" else="">
        <isset property="env.DEPLOY_HOSTS" />
    </condition>
    <condition property="deploy.master" value="${env.DEPLOY_MASTER}" else="">
        <isset property="env.DEPLOY_MASTER" />
    </condition>
    <condition property="deploy.slaves" value="${env.DEPLOY_SLAVES}" else="">
        <isset property="env.DEPLOY_SLAVES" />
    </condition>    
    <condition property="deploy.frameworks" value="${env.DEPLOY_FRAMEWORKS}" else="">
        <isset property="env.DEPLOY_FRAMEWORKS" />
    </condition>

    <!-- Jenkins workspace -->
    <condition property="workspace.dir" value="${env.WORKSPACE}" else="${basedir}">
        <isset property="env.WORKSPACE" />
    </condition>

    <!-- Version properties -->
    <!-- NOTE: The default version values are updated via a script. -->
    <property name="version.num.def" value="3.0" />
    <property name="version.name.def" value="snapshot" />
    <condition property="version.num" value="${env.VERSION_NUM}" else="${version.num.def}">
        <isset property="env.VERSION_NUM" />
    </condition>
    <condition property="version.name" value="${env.VERSION_NAME}" else="${version.name.def}">
        <isset property="env.VERSION_NAME" />
    </condition>
    <condition property="version.build" value="${env.BUILD_NUMBER}" else="">
        <isset property="env.BUILD_NUMBER" />
    </condition>

    <!-- Python path -->
    <property name="pyenv.dir" value="${workspace.dir}/../.pyenv" />
    <condition property="pybin.dir" value="${pyenv.dir}/bin" else="${pyenv.dir}/Scripts">
        <os family="unix" />
    </condition>

    <!-- PyPi Server -->
    <property name="pypi.url" value="${env.PYPI_URL}" />

    <!-- Environment paths -->
    <property name="pgsql.dir" value="${workspace.dir}/../pgsql" />
    <property name="lib.path" value="${pgsql.dir}/lib:${pgsql.dir}/lib/geos" />
    <property name="settings.file" value="${workspace.dir}/../local_settings.py" />

    <!-- Project directories -->
    <property name="scale.dir" value="${workspace.dir}/scale" />
    <property name="reports.dir" value="${scale.dir}/.reports" />
    <property name="test.dir" value="${reports.dir}/test" />
    <property name="analysis.dir" value="${reports.dir}/analysis" />
    <property name="diagrams.dir" value="${reports.dir}/diagrams" />
    <property name="docs-src.dir" value="${scale.dir}/docs" />
    <property name="docs-dest.dir" value="${docs-src.dir}/_build" />
    <property name="dist.dir" value="${workspace.dir}/.dist" />

    <property name="deploy.to.dir" value="/opt/scale" />
    <property name="deploy.scale.user" value="scale" />
	<property name="deploy.parallel" value="true" />

    <!-- CLEAN -->
    <target name="clean" description="Removes compiled files.">
        <echo>Cleaning compiled Python files.</echo>
        <delete>
            <fileset dir="." includes="**/*.pyc" />
        </delete>
    </target>

    <!-- VIRTUALENV -->
    <target name="virtualenv" description="Creates a Python virtual environment.">

        <echo>Creating Python virtual environment.</echo>
        <exec executable="virtualenv-2.7">
            <arg value="--no-site-packages" />
            <arg value="${pyenv.dir}" />
        </exec>
    </target>

    <!-- PIP -->
    <target name="pip" depends="virtualenv" description="Installs all the 3rd pary Python dependencies.">
        <echo>Installing 3rd party dependencies.</echo>
        <exec executable="${pybin.dir}/pip">
            <arg value="install" />
            <arg value="-i" />
            <arg value="${pypi.url}" />
            <arg value="-r" />
            <arg value="${scale.dir}/pip/build_linux.txt" />
        </exec>
    </target>

    <!-- SETUP -->
    <target name="setup" description="Configures the project for execution.">
        <echo>Copying local settings configuration file.</echo>
        <copy file="${settings.file}" todir="${scale.dir}/scale" />
    </target>

    <!-- COMPILE -->
    <target name="compile" depends="clean,setup" description="Compiles all Python files.">
        <echo>Compiling all Python files.</echo>
        <exec executable="${pybin.dir}/python">
            <arg value="-m" />
            <arg value="compileall" />
            <arg value="-q" />
            <arg value="-f" />
            <arg value="${scale.dir}" />
        </exec>
    </target>

    <!-- DATABASE -->
    <target name="database" description="Configures the test database.">
        <echo>Synchronizing database schema.</echo>
        <exec executable="${pybin.dir}/python">
            <env key="LD_LIBRARY_PATH" path="${lib.path}:${env.LD_LIBRARY_PATH}" />
            <env key="DJANGO_SETTINGS_MODULE" value="scale.local_settings" />
            <arg value="manage.py" />
            <arg value="migrate" />
        </exec>
        <echo>Loading initial database data.</echo>
        <exec executable="${pybin.dir}/python">
            <env key="LD_LIBRARY_PATH" path="${lib.path}:${env.LD_LIBRARY_PATH}" />
            <env key="DJANGO_SETTINGS_MODULE" value="scale.local_settings" />
            <arg value="manage.py" />
            <arg value="load_all_data" />
        </exec>
    </target>

    <!-- TEST -->
    <target name="test" depends="database" description="Executes all the unit tests.">
        <echo>Executing unit tests</echo>
        <dirset id="pyset" dir="${scale.dir}" includes="*">
            <or>
               <!--look for a test.py -->
               <present targetdir="${scale.dir}">
                   <mapper type="glob" from="*" to="*/tests.py" />
               </present>
               <!--or a test folder -->
               <present targetdir="${scale.dir}">
                   <mapper type="glob" from="*" to="*/test" />
               </present>
           </or>
        </dirset>

        <pathconvert dirsep="/" pathsep=" " property="app.dirs" refid="pyset">
            <mapper type="flatten" />
        </pathconvert>

        <pathconvert dirsep="/" pathsep="," property="app.list" refid="pyset">
            <mapper type="flatten" />
        </pathconvert>

        
        <echo>Discovered Django applications: ${app.dirs}</echo>

        <delete dir="${test.dir}" />
        <mkdir dir="${test.dir}" />

        <echo>Executing Python nose test runner.</echo>
        <exec executable="${pybin.dir}/nosetests">
            <env key="LD_LIBRARY_PATH" path="${lib.path}:${env.LD_LIBRARY_PATH}" />
            <env key="DJANGO_SETTINGS_MODULE" value="scale.local_settings" />
            <env key="PYTHONWARNINGS" value="all" />
            <arg value="--with-xunit" />
            <arg value="--xunit-file=${test.dir}/nose-tests.xml" />
            <arg value="--with-coverage" />
            <arg value="--cover-branches" />
            <arg value="--cover-xml" />
            <arg value="--cover-xml-file=${test.dir}/nose-coverage.xml" />
            <arg value="--cover-package=${app.list}" />
            <arg line="${app.dirs}" />
        </exec>
    </target>

    <!-- ANALYSIS -->
    <target name="analysis" description="Runs code quality analysis tools.">
        <dirset id="pyset" dir="${scale.dir}" includes="*">
            <present targetdir="${scale.dir}">
                <mapper type="glob" from="*" to="*/__init__.py" />
            </present>
        </dirset>
        <pathconvert dirsep="/" pathsep=" " property="py.dirs" refid="pyset">
            <mapper type="flatten" />
        </pathconvert>
        <echo>Discovered Python modules: ${py.dirs}</echo>

        <delete dir="${analysis.dir}" />
        <mkdir dir="${analysis.dir}" />

        <echo>Executing Python flake8 analysis.</echo>
        <exec executable="${pybin.dir}/flake8" output="${analysis.dir}/flake8-py.txt">
            <arg value="--format" />
            <arg value="pylint" />
            <arg value="--exclude" />
            <arg value="mesos.py,mesos_pb2.py,migrations,test*" />
            <arg value="--max-complexity" />
            <arg value="10" />
            <arg value="--max-line-length" />
            <arg value="120" />
            <arg line="${py.dirs}" />
        </exec>

        <echo>Executing Python pylint analysis.</echo>
        <exec executable="${pybin.dir}/pylint" output="${analysis.dir}/pylint-py.txt">
            <arg value="--output-format=parseable" />
            <arg value="--rcfile=${scale.dir}/.pylintrc" />
            <arg line="${py.dirs}" />
        </exec>

        <delete dir="${diagrams.dir}" />
        <mkdir dir="${diagrams.dir}" />

        <echo>Generating Python pylint dependency diagrams.</echo>
        <exec executable="${pybin.dir}/pyreverse" dir="${scale.dir}" output="${diagrams.dir}/pyreverse.txt">
            <arg value="-a1" />
            <arg value="-s1" />
            <arg value="-o" />
            <arg value="png" />
            <arg value="-p" />
            <arg value="${ant.project.name}" />
            <arg value="-f" />
            <arg value="ALL" />
            <arg line="${py.dirs}" />
        </exec>
    </target>

    <!-- DOCUMENTATION -->
    <target name="docs" depends="pip,setup" description="Generates documentation from source code.">
        <echo>Generating documentation</echo>

        <delete dir="${docs-dest.dir}" />
    	<mkdir dir="${docs-dest.dir}" />

    	<delete dir="${docs-src.dir}/architecture/django/code_docs" />
    	<exec executable="${pybin.dir}/sphinx-apidoc">
            <arg value="-f" />
    		<arg value="-T" />
    		<arg value="-o" />
            <arg value="${docs-src.dir}/architecture/django/code_docs" />
    		<arg value="${scale.dir}" />
        </exec>

        <exec executable="${pybin.dir}/sphinx-build">
            <env key="LD_LIBRARY_PATH" path="${lib.path}:${env.LD_LIBRARY_PATH}" />
            <env key="DJANGO_SETTINGS_MODULE" value="scale.local_settings" />
            <arg value="-b" />
            <arg value="html" />
            <arg value="${docs-src.dir}" />
            <arg value="${docs-dest.dir}" />
        </exec>
    </target>

    <!-- DISTRIBUTION -->
    <target name="dist" description="Packages all generated output for distribution.">
        <echo>Packaging project into distribution file</echo>

        <delete dir="${dist.dir}" />
        <mkdir dir="${dist.dir}" />

        <tar destfile="${dist.dir}/${ant.project.name}-${version}.tar.gz" compression="gzip">
            <tarfileset dir="${scale.dir}" prefix="scale/">
                <include name="**" />
                <exclude name=".*/" />
                <exclude name="**/*.pyc" />
                <exclude name="**/*.db" />
                <exclude name="**/tests/**" />
                <exclude name="**/test*" />
                <exclude name="**/logs/**" />
                <exclude name="**/logs**" />
                <exclude name="**/spec/**" />
                <exclude name="jenkins.xml" />
                <exclude name="scale/local_settings.py" />
                <exclude name="docs/**" />
            </tarfileset>
            <tarfileset dir="${scale.dir}/docs/_build" prefix="scale/docs">
                <include name="**" />
                <exclude name=".*/" />
            </tarfileset>
        </tar>

    </target>

    <!-- COMMON -->
    <target name="common" depends="pip,compile,test,analysis,docs" description="Runs tasks common between CI and release.">
    </target>

    <!-- CONTINUOUS INTEGRATION -->
    <target name="ci" depends="common" description="Runs all tasks required to make a build.">
        <antcall target="dist">
            <param name="version" value="${version.num}-${version.name}+${version.build}" />
        </antcall>
    </target>

    <!-- RELEASE -->
    <target name="release" depends="common" description="Runs all tasks required to make a release.">
        <antcall target="dist">
            <param name="version" value="${version.num}" />
        </antcall>

    </target>
    
    <!-- DEPRECATED -->
    <target name="start-all" depends="start-slaves,start-frameworks" />
    
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="ant-contrib.jar"/>
    
    <!-- DEPRECATED -->
    <target name="start-master" depends="deploy">
        <sshexec trust="true" host="${deploy.master}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo systemctl start mesos-master" />
    </target>
    
    <!-- DEPRECATED -->
    <target name="start-slaves" depends="deploy">
        <for param="deploy.slave" list="${deploy.slaves}" parallel="${deploy.parallel}">
            <sequential>
                <!-- make sure the slave is shut down, and clear out docker and before starting up again -->
                <sshexec trust="true" failonerror="false" host="@{deploy.slave}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo systemctl stop mesos-slave" />
                <sshexec trust="true" failonerror="false" host="@{deploy.slave}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo docker rm $(sudo docker ps -a | grep Dead | awk '{print $1}')" />
                <sshexec trust="true" failonerror="false" host="@{deploy.slave}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo docker rm $(sudo docker ps -a | grep Exited | awk '{print $1}')" />

                <sshexec trust="true" host="@{deploy.slave}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo systemctl start mesos-slave" />
            </sequential>
        </for>
    </target>
    
    <!-- DEPRECATED -->
    <target name="start-frameworks" depends="deploy">
        <for param="deploy.framework" list="${deploy.frameworks}" parallel="${deploy.parallel}">
            <sequential>
                <sshexec trust="true" host="@{deploy.framework}" keyfile="${ssh.key}" username="${ssh.user}" command="${deploy.to}/scripts/startFramework.sh" />
            </sequential>
        </for>
    </target>
        
    <target name="build-for-deploy" depends="docs">
        <antcall target="dist">
            <param name="version" value="${version.num}-${version.name}+${version.build}" />
        </antcall>
    </target>

    <!-- DEPRECATED -->
    <target name="deploy" depends="docs">
        <antcall target="dist">
            <param name="version" value="${version.num}-${version.name}+${version.build}" />
        </antcall>
        
        <for param="deploy.host" list="${deploy.hosts}" parallel="${deploy.parallel}">
            <sequential>
	            <antcall target="_deploy">
	                <param name="deploy.host" value="@{deploy.host}"/>
	                <param name="distfile" value="${ant.project.name}-${version.num}-${version.name}+${version.build}.tar.gz" />
	            </antcall>
            </sequential>
        </for>
    </target>

    <!-- DEPRECATED -->
    <target name="_deploy">
        <fail message="deploy.host required" unless="deploy.host"/>
        <fail message="ssh.key required" unless="ssh.key"/>
        <fail message="ssh.user required" unless="ssh.user"/>
        <fail message="stage.to required" unless="stage.to"/>
        <fail message="deploy.to required" unless="deploy.to"/>
        <fail message="deploy.scale.user required" unless="deploy.scale.user"/>
        
        <sshexec trust="true" host="${deploy.host}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo mkdir -p ${stage.to}" />
        <sshexec trust="true" host="${deploy.host}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo chown ${ssh.user}:users ${stage.to}" />
        <sshexec trust="true" host="${deploy.host}" keyfile="${ssh.key}" username="${ssh.user}" command="rm -rf ${stage.to}/*" />
        <scp trust="true" localFile="${dist.dir}/${distfile}" keyfile="${ssh.key}" remoteTodir="${ssh.user}@${deploy.host}:${stage.to}" />
        <sshexec trust="true" host="${deploy.host}" keyfile="${ssh.key}" username="${ssh.user}" command="tar xf ${stage.to}/${distfile} -C ${stage.to}" />
        <sshexec trust="true" host="${deploy.host}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo chown -R ${ssh.user} ${stage.to}/scale" />
        <sshexec trust="true" host="${deploy.host}" keyfile="${ssh.key}" username="${ssh.user}" command="sudo chmod 775 ${stage.to}/scale/scripts/*" />
    	<sshexec trust="true" host="${deploy.host}" keyfile="${ssh.key}" username="${ssh.user}" command="sleep $[ ( $RANDOM % 60 ) + 1 ]" />
        <sshexec trust="true" host="${deploy.host}" keyfile="${ssh.key}" username="${ssh.user}" command="${stage.to}/scale/scripts/deploy.sh ${deploy.to} ${deploy.scale.user}" />
    </target>

</project>
